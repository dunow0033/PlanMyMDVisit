// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using planMyMDVisit.Data;

#nullable disable

namespace planMyMDVisit.Migrations
{
    [DbContext(typeof(PlanMyMDVisitContext))]
    [Migration("20250725141852_SeedAdminWithSecurityStamp")]
    partial class SeedAdminWithSecurityStamp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorsId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("DoctorPatient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0cab2c3-6558-4a1c-be81-dfb39180da3d"),
                            Name = "admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbf44e0f-6967-4376-bca3-e06195f64e3a"),
                            Specialty = "Allergy",
                            UserId = new Guid("1d7649a6-d84e-4735-a99a-c890bbbbb2e0")
                        },
                        new
                        {
                            Id = new Guid("d19b2b10-01e2-4073-8598-030efcba4520"),
                            Specialty = "Cardiac Surgery",
                            UserId = new Guid("9bb0854e-0b8f-4073-94f7-7ff6d5c2a56e")
                        },
                        new
                        {
                            Id = new Guid("cfe370e4-a0f4-4378-a02f-4087a2e4c1e3"),
                            Specialty = "Dermatology",
                            UserId = new Guid("4c10dc95-4029-4313-b054-139035ae794b")
                        },
                        new
                        {
                            Id = new Guid("0f8c6d6a-c24f-433f-be3b-ca89eee08c6d"),
                            Specialty = "Dermatology",
                            UserId = new Guid("353df188-4ff4-46d7-9de9-be47c4e7dd2f")
                        },
                        new
                        {
                            Id = new Guid("bbfb56ba-5f60-413e-8319-f0dcf3fbacdf"),
                            Specialty = "Chiropractic",
                            UserId = new Guid("55820041-0dc2-4f0b-9b99-b12205c4b85d")
                        },
                        new
                        {
                            Id = new Guid("95a855b0-406b-442e-9291-1507eba7d431"),
                            Specialty = "Dermatology",
                            UserId = new Guid("63c6ecaa-03a2-4018-83aa-456b4be0d599")
                        });
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.HealthCareTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Appointment")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7ad59f7-4a5b-4491-a5ed-bb38781d190f"),
                            UserId = new Guid("d93991c1-b430-44ea-abf9-84c811629c9c")
                        },
                        new
                        {
                            Id = new Guid("08b5b773-6780-4f1f-a6aa-9b244de0ddc3"),
                            UserId = new Guid("22053662-affa-4896-a475-d5d086861a72")
                        },
                        new
                        {
                            Id = new Guid("0a706d1d-b56e-4c10-b47c-11ebfa8d5d4d"),
                            UserId = new Guid("20945e7a-157d-487e-ae00-f23792d0dc75")
                        },
                        new
                        {
                            Id = new Guid("6c845471-e1ea-4646-a4de-665f063ee3de"),
                            UserId = new Guid("cdf8ea83-0886-43d3-839c-54f5e5bbd3aa")
                        },
                        new
                        {
                            Id = new Guid("dff1a37e-db13-402a-9a11-b9c4877dbe91"),
                            UserId = new Guid("003e4c5e-dc8f-4420-9c4b-037cd42994e1")
                        },
                        new
                        {
                            Id = new Guid("41334662-a41a-40f7-9342-2b7abccfd721"),
                            UserId = new Guid("6de84357-01f4-4bca-ab09-5a57bfc51e62")
                        });
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorOrPatient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d93991c1-b430-44ea-abf9-84c811629c9c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e81adb8-8312-43e6-8cbc-99ba27d1b566",
                            DoctorOrPatient = "patient",
                            Email = "dannyt@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Danny",
                            LastName = "Tonner",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "dannyt"
                        },
                        new
                        {
                            Id = new Guid("22053662-affa-4896-a475-d5d086861a72"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f8eb7f4-40fd-4bc9-9fb1-0ee404a840ca",
                            DoctorOrPatient = "patient",
                            Email = "vanessar@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Vanessa",
                            LastName = "Reagan",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "vanessar"
                        },
                        new
                        {
                            Id = new Guid("20945e7a-157d-487e-ae00-f23792d0dc75"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f3d95fc-7d93-4d74-abee-dd4aafc2ae34",
                            DoctorOrPatient = "patient",
                            Email = "mikej@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mikej"
                        },
                        new
                        {
                            Id = new Guid("cdf8ea83-0886-43d3-839c-54f5e5bbd3aa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7eb5c3fd-db68-42f0-8038-a5ddf3a09bda",
                            DoctorOrPatient = "patient",
                            Email = "helens@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Helen",
                            LastName = "Skyburgh",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "helens"
                        },
                        new
                        {
                            Id = new Guid("003e4c5e-dc8f-4420-9c4b-037cd42994e1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70657844-5950-491e-b168-b7ffef6b9ae4",
                            DoctorOrPatient = "patient",
                            Email = "bradc@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Brad",
                            LastName = "Connors",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bradc"
                        },
                        new
                        {
                            Id = new Guid("6de84357-01f4-4bca-ab09-5a57bfc51e62"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4378f0d0-81ec-4d71-9045-5be6e10f3e2b",
                            DoctorOrPatient = "patient",
                            Email = "rickn@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Rick",
                            LastName = "Nyburgh",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rickn"
                        },
                        new
                        {
                            Id = new Guid("1d7649a6-d84e-4735-a99a-c890bbbbb2e0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9e536ea-6046-425c-8beb-e8a1b2d739fa",
                            DoctorOrPatient = "patient",
                            Email = "danr@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Dan",
                            LastName = "Riley",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "danr"
                        },
                        new
                        {
                            Id = new Guid("9bb0854e-0b8f-4073-94f7-7ff6d5c2a56e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3778786-0e77-4a1b-8176-76622780f766",
                            DoctorOrPatient = "doctor",
                            Email = "path@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patrick",
                            LastName = "Hordner",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "path"
                        },
                        new
                        {
                            Id = new Guid("4c10dc95-4029-4313-b054-139035ae794b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13c89f80-dd8d-4e64-b608-261af4c61e29",
                            DoctorOrPatient = "doctor",
                            Email = "timr@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Timmy",
                            LastName = "Rudner",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "timr"
                        },
                        new
                        {
                            Id = new Guid("353df188-4ff4-46d7-9de9-be47c4e7dd2f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98f8a59f-397b-42f3-b85c-dd70d97f175f",
                            DoctorOrPatient = "doctor",
                            Email = "jacks@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jack",
                            LastName = "Sackson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jacks"
                        },
                        new
                        {
                            Id = new Guid("55820041-0dc2-4f0b-9b99-b12205c4b85d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c4ce6c0-3ec3-4a4c-983b-d803f74ea631",
                            DoctorOrPatient = "doctor",
                            Email = "samr@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sammy",
                            LastName = "Rostun",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "samr"
                        },
                        new
                        {
                            Id = new Guid("63c6ecaa-03a2-4018-83aa-456b4be0d599"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00c6a4b9-fd16-4b71-b07d-1f2cf3c44e8f",
                            DoctorOrPatient = "doctor",
                            Email = "nickp@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Nicholas",
                            LastName = "Perkins",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nickp"
                        },
                        new
                        {
                            Id = new Guid("a0cab2c3-6558-4a1c-be81-dfb39180da3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9793e6ce-d724-411e-b95e-99ae2ddfcded",
                            DoctorOrPatient = "admin",
                            Email = "admin@planMyMD.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@PLANMYMD.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEACeXdFLr2cFOc7Qv9mklQVrEg4+Tr/ZNauuuBsLgbo2HZ7b4VMG0qms18STU3WtXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ede61909-757e-4879-808d-bd1a5bd4a0ea",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("planMyMDVisit.Models.Domain.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.HealthCareTeam", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.Doctor", "Doctor")
                        .WithMany("HealthCareTeams")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("planMyMDVisit.Models.Domain.Patient", "Patient")
                        .WithMany("HealthCareTeams")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.Navigation("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.Navigation("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.User", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
