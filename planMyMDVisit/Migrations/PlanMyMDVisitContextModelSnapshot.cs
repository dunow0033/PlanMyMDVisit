// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using planMyMDVisit.Data;

#nullable disable

namespace planMyMDVisit.Migrations
{
    [DbContext(typeof(PlanMyMDVisitContext))]
    partial class PlanMyMDVisitContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorsId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("DoctorPatient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0cab2c3-6558-4a1c-be81-dfb39180da3d"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a0cab2c3-6558-4a1c-be81-dfb39180da3d"),
                            RoleId = new Guid("a0cab2c3-6558-4a1c-be81-dfb39180da3d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d6e2112-d7b2-419e-aaf2-91bbcadba09d"),
                            Specialty = "Allergy",
                            UserId = new Guid("14fd7d49-9ae5-482e-98c5-90fce3a11f56")
                        },
                        new
                        {
                            Id = new Guid("cf8aee50-f439-4998-b927-7e4081f0b3e9"),
                            Specialty = "Cardiac Surgery",
                            UserId = new Guid("db862a03-f901-4e1c-b847-82c68164d39d")
                        },
                        new
                        {
                            Id = new Guid("49127570-281d-4959-bf57-31288572add0"),
                            Specialty = "Dermatology",
                            UserId = new Guid("bb5e57af-d934-4348-a871-8a8a2ba7279c")
                        },
                        new
                        {
                            Id = new Guid("8cca4874-f01b-4dc4-a1b7-9ab932aa40f9"),
                            Specialty = "Dermatology",
                            UserId = new Guid("24d11053-b0cf-4885-89ea-34219538e41e")
                        },
                        new
                        {
                            Id = new Guid("d1ea3ffa-d9c5-451a-a2ac-665be41c78e4"),
                            Specialty = "Chiropractic",
                            UserId = new Guid("d745e220-2233-4e86-96b4-357b105d9274")
                        },
                        new
                        {
                            Id = new Guid("00f77c5c-f394-44a4-b5d9-69da9cd0b6a5"),
                            Specialty = "Dermatology",
                            UserId = new Guid("d4342e2f-6428-4c12-bb0b-69369f2155ab")
                        });
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.HealthCareTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Appointment")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d85c77d8-a0f4-4618-86f9-7fc5a75b112f"),
                            UserId = new Guid("ed2713b4-dd81-46b5-ae90-544a3785b112")
                        },
                        new
                        {
                            Id = new Guid("d4f227bf-91c9-44da-a5d6-607f0265f2fe"),
                            UserId = new Guid("b3123369-3fc5-4cb1-ba3f-f0f7e1da6c35")
                        },
                        new
                        {
                            Id = new Guid("3b1ae60c-90a5-4537-9a6d-05cce94e93e0"),
                            UserId = new Guid("e6d9f6a5-3184-42f5-865b-2e0d50c90e06")
                        },
                        new
                        {
                            Id = new Guid("16f012c6-e872-4708-9cb0-78ac0303c42d"),
                            UserId = new Guid("30aac335-a2f2-40c5-85d0-57d45e37f6aa")
                        },
                        new
                        {
                            Id = new Guid("9061f8b7-2058-4f3e-a63a-b2556cc09a70"),
                            UserId = new Guid("9ada84c1-13b7-40da-abdc-d79f1cebfe22")
                        },
                        new
                        {
                            Id = new Guid("5288d485-6dcc-4cec-bd33-66dec6e26969"),
                            UserId = new Guid("23620d04-c9f7-4cac-bde7-8cb7f501c610")
                        });
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorOrPatient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed2713b4-dd81-46b5-ae90-544a3785b112"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "5c386e1c-a60c-40f0-80db-6e52a850b677",
                            DoctorOrPatient = "patient",
                            Email = "dannyt@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Danny",
                            LastName = "Tonner",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "dannyt"
                        },
                        new
                        {
                            Id = new Guid("b3123369-3fc5-4cb1-ba3f-f0f7e1da6c35"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "b588826f-fd68-447a-9bb0-59c05af32ca8",
                            DoctorOrPatient = "patient",
                            Email = "vanessar@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Vanessa",
                            LastName = "Reagan",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "vanessar"
                        },
                        new
                        {
                            Id = new Guid("e6d9f6a5-3184-42f5-865b-2e0d50c90e06"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "6c391882-26a3-4bb0-b45a-7ff4923a6f25",
                            DoctorOrPatient = "patient",
                            Email = "mikej@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mikej"
                        },
                        new
                        {
                            Id = new Guid("30aac335-a2f2-40c5-85d0-57d45e37f6aa"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "76b38aaa-f187-4b6e-a893-82155ffbe0b8",
                            DoctorOrPatient = "patient",
                            Email = "helens@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Helen",
                            LastName = "Skyburgh",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "helens"
                        },
                        new
                        {
                            Id = new Guid("9ada84c1-13b7-40da-abdc-d79f1cebfe22"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "01195b5b-d29d-43bb-b935-7a415b12e1d3",
                            DoctorOrPatient = "patient",
                            Email = "bradc@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Brad",
                            LastName = "Connors",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bradc"
                        },
                        new
                        {
                            Id = new Guid("23620d04-c9f7-4cac-bde7-8cb7f501c610"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "6573e696-ce0f-43ec-b559-93a363e73753",
                            DoctorOrPatient = "patient",
                            Email = "rickn@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Rick",
                            LastName = "Nyburgh",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rickn"
                        },
                        new
                        {
                            Id = new Guid("14fd7d49-9ae5-482e-98c5-90fce3a11f56"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "8c538a0b-f5a7-4293-8fdc-dfba7679bc9f",
                            DoctorOrPatient = "patient",
                            Email = "danr@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Dan",
                            LastName = "Riley",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "danr"
                        },
                        new
                        {
                            Id = new Guid("db862a03-f901-4e1c-b847-82c68164d39d"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "ae389284-2127-4e2c-9b22-ee6454d4a1ca",
                            DoctorOrPatient = "doctor",
                            Email = "path@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patrick",
                            LastName = "Hordner",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "path"
                        },
                        new
                        {
                            Id = new Guid("bb5e57af-d934-4348-a871-8a8a2ba7279c"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "711f3fea-5fd8-4e96-83ed-252978244ffd",
                            DoctorOrPatient = "doctor",
                            Email = "timr@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Timmy",
                            LastName = "Rudner",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "timr"
                        },
                        new
                        {
                            Id = new Guid("24d11053-b0cf-4885-89ea-34219538e41e"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "d3d2c1ef-23a4-4760-8342-65fd553b052e",
                            DoctorOrPatient = "doctor",
                            Email = "jacks@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jack",
                            LastName = "Sackson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jacks"
                        },
                        new
                        {
                            Id = new Guid("d745e220-2233-4e86-96b4-357b105d9274"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "2d3241f5-2e91-4e4e-a414-c9717c0bf6d8",
                            DoctorOrPatient = "doctor",
                            Email = "samr@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sammy",
                            LastName = "Rostun",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "samr"
                        },
                        new
                        {
                            Id = new Guid("d4342e2f-6428-4c12-bb0b-69369f2155ab"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "6250ab14-edfe-49f5-8cbf-263821bd8213",
                            DoctorOrPatient = "doctor",
                            Email = "nickp@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Nicholas",
                            LastName = "Perkins",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nickp"
                        },
                        new
                        {
                            Id = new Guid("a0cab2c3-6558-4a1c-be81-dfb39180da3d"),
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "3e9c3bee-a661-4c0b-91cb-67facb26b375",
                            DoctorOrPatient = "admin",
                            Email = "admin@planMyMD.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@PLANMYMD.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELIdDoThpdaS6DhfVbBAXFjmIm9tfp3FBQ2czcXmUJ7IjAH7wGQVfn2b0WhbxLm4nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3ef7eb6-9e1f-4c38-997c-f7c407753455",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("planMyMDVisit.Models.Domain.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.HealthCareTeam", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.Doctor", "Doctor")
                        .WithMany("HealthCareTeams")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("planMyMDVisit.Models.Domain.Patient", "Patient")
                        .WithMany("HealthCareTeams")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.Navigation("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.Navigation("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.User", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
