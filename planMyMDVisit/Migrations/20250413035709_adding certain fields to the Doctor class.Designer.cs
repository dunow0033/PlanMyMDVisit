// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using planMyMDVisit.Data;

#nullable disable

namespace planMyMDVisit.Migrations
{
    [DbContext(typeof(PlanMyMDVisitContext))]
    [Migration("20250413035709_adding certain fields to the Doctor class")]
    partial class addingcertainfieldstotheDoctorclass
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorsId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("DoctorPatient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19b4da80-39f8-44c5-a544-893221d0c08a"),
                            Name = "Dr. Smith",
                            Specialty = "Allergy",
                            UserId = new Guid("10a24d88-8b1a-47ba-a558-309886283841")
                        },
                        new
                        {
                            Id = new Guid("535c97b0-cd5f-43b5-b10f-23bd3c954c2d"),
                            Name = "Dr. Taylor",
                            Specialty = "Cardiac Surgery",
                            UserId = new Guid("21b3645e-34f1-4257-9c39-ece2306468db")
                        },
                        new
                        {
                            Id = new Guid("ad525324-5fb4-4c54-81ae-ebe2a100ee59"),
                            Name = "Dr. Rogers",
                            Specialty = "Dermatology",
                            UserId = new Guid("21b3645e-34f1-4257-9c39-ece2306468db")
                        },
                        new
                        {
                            Id = new Guid("113706d9-4c18-41ed-8770-a5cf48258be5"),
                            Name = "Dr. Banks",
                            Specialty = "Dermatology",
                            UserId = new Guid("21b3645e-34f1-4257-9c39-ece2306468db")
                        },
                        new
                        {
                            Id = new Guid("c026a978-1be2-46db-acf2-ce122397905a"),
                            Name = "Dr. White",
                            Specialty = "Chiropractic",
                            UserId = new Guid("21b3645e-34f1-4257-9c39-ece2306468db")
                        },
                        new
                        {
                            Id = new Guid("285b8ba0-0f84-4e32-95e9-7fb824873a0c"),
                            Name = "Dr. Jordan",
                            Specialty = "Dermatology",
                            UserId = new Guid("21b3645e-34f1-4257-9c39-ece2306468db")
                        });
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.HealthCareTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Appointment")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e6646db-be2b-444b-9c0e-0296eb259e07"),
                            UserId = new Guid("3899d5e0-f710-4e26-84f5-4929670f4cfb")
                        },
                        new
                        {
                            Id = new Guid("1c6801d0-bd10-4d7b-ac6e-db0790961cc9"),
                            UserId = new Guid("77bd4b2b-f4e5-4387-b482-cba637487ec8")
                        },
                        new
                        {
                            Id = new Guid("b192f28b-0421-400b-a7c2-39b57c47cd44"),
                            UserId = new Guid("10b74731-a11b-4923-8d02-08291efa8cb4")
                        });
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10a24d88-8b1a-47ba-a558-309886283841"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e861839a-a605-4549-b599-16725c101419",
                            Email = "dannyt@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Danny",
                            LastName = "Tonner",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "dannyt"
                        },
                        new
                        {
                            Id = new Guid("21b3645e-34f1-4257-9c39-ece2306468db"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "579242e9-9755-4d4d-93ff-5038fceaaa2e",
                            Email = "vanessar@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Vanessa",
                            LastName = "Reagan",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "vanessar"
                        },
                        new
                        {
                            Id = new Guid("5378af9a-b946-4082-be42-5d1adf8f64d4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a6f7211-e1de-4bbb-beb0-68500b04b4c5",
                            Email = "mikej@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mikej"
                        },
                        new
                        {
                            Id = new Guid("3899d5e0-f710-4e26-84f5-4929670f4cfb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "febb9e2a-7dea-423c-bc36-d0506844f363",
                            Email = "helens@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Helen",
                            LastName = "Skyburgh",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "helens"
                        },
                        new
                        {
                            Id = new Guid("77bd4b2b-f4e5-4387-b482-cba637487ec8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "972f3f39-438e-46d9-af83-30c27c783b60",
                            Email = "bradc@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Brad",
                            LastName = "Connors",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bradc"
                        },
                        new
                        {
                            Id = new Guid("10b74731-a11b-4923-8d02-08291efa8cb4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdf2e2a7-63e3-4cda-99f5-0ae08dd6569a",
                            Email = "rickn@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Rick",
                            LastName = "Nyburgh",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rickn"
                        });
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("planMyMDVisit.Models.Domain.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.HealthCareTeam", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.Doctor", "Doctor")
                        .WithMany("HealthCareTeams")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("planMyMDVisit.Models.Domain.Patient", "Patient")
                        .WithMany("HealthCareTeams")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("planMyMDVisit.Models.Domain.Patient", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.Navigation("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.Navigation("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.User", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
