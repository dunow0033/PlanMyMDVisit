// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using planMyMDVisit.Data;

#nullable disable

namespace planMyMDVisit.Migrations
{
    [DbContext(typeof(PlanMyMDVisitContext))]
    [Migration("20250414201402_correcting the issue with the Specialty variable in HealthCareTeam")]
    partial class correctingtheissuewiththeSpecialtyvariableinHealthCareTeam
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorsId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("DoctorPatient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46f2bc6a-d3c3-4e0a-a0e9-b421dbabd330"),
                            Name = "Dr. Smith",
                            Specialty = "Allergy",
                            UserId = new Guid("0776dfbb-5255-40cf-8b25-c61532fa6ce8")
                        },
                        new
                        {
                            Id = new Guid("a909439c-9b4f-4b38-8afe-5d34c9565875"),
                            Name = "Dr. Taylor",
                            Specialty = "Cardiac Surgery",
                            UserId = new Guid("ce4b993b-8d0a-47f5-bd11-24983e4fcfd2")
                        },
                        new
                        {
                            Id = new Guid("db25095e-ce36-4d31-a3f1-0782c00718c2"),
                            Name = "Dr. Rogers",
                            Specialty = "Dermatology",
                            UserId = new Guid("ce4b993b-8d0a-47f5-bd11-24983e4fcfd2")
                        },
                        new
                        {
                            Id = new Guid("710a5536-a5ac-483a-a468-6bae5ea0bc3d"),
                            Name = "Dr. Banks",
                            Specialty = "Dermatology",
                            UserId = new Guid("ce4b993b-8d0a-47f5-bd11-24983e4fcfd2")
                        },
                        new
                        {
                            Id = new Guid("4f79d3ab-9157-4402-8efc-af7b1105b185"),
                            Name = "Dr. White",
                            Specialty = "Chiropractic",
                            UserId = new Guid("ce4b993b-8d0a-47f5-bd11-24983e4fcfd2")
                        },
                        new
                        {
                            Id = new Guid("2189f5e1-5e5e-4531-bb14-5fa268226855"),
                            Name = "Dr. Jordan",
                            Specialty = "Dermatology",
                            UserId = new Guid("ce4b993b-8d0a-47f5-bd11-24983e4fcfd2")
                        });
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.HealthCareTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Appointment")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d61cfe1-ebbc-4194-9ad7-4f241864663d"),
                            UserId = new Guid("16df2b94-3b05-4f00-998f-1c33719a8d73")
                        },
                        new
                        {
                            Id = new Guid("2cec381c-39eb-43b5-be42-d2c9eaca1884"),
                            UserId = new Guid("013d94df-29f7-4634-bfaf-81245d58192a")
                        },
                        new
                        {
                            Id = new Guid("39f844ef-6797-4171-91ad-8b74b6392d3b"),
                            UserId = new Guid("d0337856-ffe2-4fee-9bed-13b992dd2046")
                        });
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0776dfbb-5255-40cf-8b25-c61532fa6ce8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f19e35ba-9c0e-45da-a141-971a40eeb013",
                            Email = "dannyt@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Danny",
                            LastName = "Tonner",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "dannyt"
                        },
                        new
                        {
                            Id = new Guid("ce4b993b-8d0a-47f5-bd11-24983e4fcfd2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c65f1e1c-4b19-4bbc-8062-410f46e8a98a",
                            Email = "vanessar@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Vanessa",
                            LastName = "Reagan",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "vanessar"
                        },
                        new
                        {
                            Id = new Guid("441a14de-2c74-41b7-8ab5-edd5ce3dd9d6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4664e469-3eb5-4499-83be-480006063149",
                            Email = "mikej@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mikej"
                        },
                        new
                        {
                            Id = new Guid("16df2b94-3b05-4f00-998f-1c33719a8d73"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc331464-e884-4e95-9c01-a6f51383d2e6",
                            Email = "helens@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Helen",
                            LastName = "Skyburgh",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "helens"
                        },
                        new
                        {
                            Id = new Guid("013d94df-29f7-4634-bfaf-81245d58192a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "563f7092-87bb-45ed-bd03-fd49011a6e61",
                            Email = "bradc@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Brad",
                            LastName = "Connors",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bradc"
                        },
                        new
                        {
                            Id = new Guid("d0337856-ffe2-4fee-9bed-13b992dd2046"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f748eee-0b59-4423-b1ca-9f60b3e95616",
                            Email = "rickn@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Rick",
                            LastName = "Nyburgh",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rickn"
                        });
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("planMyMDVisit.Models.Domain.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.HealthCareTeam", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.Doctor", "Doctor")
                        .WithMany("HealthCareTeams")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("planMyMDVisit.Models.Domain.Patient", "Patient")
                        .WithMany("HealthCareTeams")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.HasOne("planMyMDVisit.Models.Domain.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("planMyMDVisit.Models.Domain.Patient", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Doctor", b =>
                {
                    b.Navigation("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.Patient", b =>
                {
                    b.Navigation("HealthCareTeams");
                });

            modelBuilder.Entity("planMyMDVisit.Models.Domain.User", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
